//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""e7a92a0c-6a4e-4351-b5cf-8e5a728e1657"",
            ""actions"": [
                {
                    ""name"": ""BuyTurret"",
                    ""type"": ""Button"",
                    ""id"": ""9a66bd95-de4b-4196-8b5e-b461d1e35405"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""68637be9-c236-49e2-8b12-a64229c77514"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""BuyTurret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BuildMode"",
            ""id"": ""23e822c2-2d8c-47a6-a737-ea9d1514bd9a"",
            ""actions"": [
                {
                    ""name"": ""PlaceTurret"",
                    ""type"": ""Button"",
                    ""id"": ""1f1046be-e278-4d8a-b091-2e0b4a448b10"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelTurret"",
                    ""type"": ""Button"",
                    ""id"": ""f91df433-99df-4565-a8ce-3bb75114c9cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3b78996c-4747-42b1-b795-016898d14c5e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""PlaceTurret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f589f6f3-4def-449c-8e8a-47284c2ba208"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""CancelTurret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MouseKeyboard"",
            ""bindingGroup"": ""MouseKeyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_BuyTurret = m_Gameplay.FindAction("BuyTurret", throwIfNotFound: true);
        // BuildMode
        m_BuildMode = asset.FindActionMap("BuildMode", throwIfNotFound: true);
        m_BuildMode_PlaceTurret = m_BuildMode.FindAction("PlaceTurret", throwIfNotFound: true);
        m_BuildMode_CancelTurret = m_BuildMode.FindAction("CancelTurret", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_BuyTurret;
    public struct GameplayActions
    {
        private @PlayerInputActions m_Wrapper;
        public GameplayActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @BuyTurret => m_Wrapper.m_Gameplay_BuyTurret;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @BuyTurret.started += instance.OnBuyTurret;
            @BuyTurret.performed += instance.OnBuyTurret;
            @BuyTurret.canceled += instance.OnBuyTurret;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @BuyTurret.started -= instance.OnBuyTurret;
            @BuyTurret.performed -= instance.OnBuyTurret;
            @BuyTurret.canceled -= instance.OnBuyTurret;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // BuildMode
    private readonly InputActionMap m_BuildMode;
    private List<IBuildModeActions> m_BuildModeActionsCallbackInterfaces = new List<IBuildModeActions>();
    private readonly InputAction m_BuildMode_PlaceTurret;
    private readonly InputAction m_BuildMode_CancelTurret;
    public struct BuildModeActions
    {
        private @PlayerInputActions m_Wrapper;
        public BuildModeActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlaceTurret => m_Wrapper.m_BuildMode_PlaceTurret;
        public InputAction @CancelTurret => m_Wrapper.m_BuildMode_CancelTurret;
        public InputActionMap Get() { return m_Wrapper.m_BuildMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildModeActions set) { return set.Get(); }
        public void AddCallbacks(IBuildModeActions instance)
        {
            if (instance == null || m_Wrapper.m_BuildModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BuildModeActionsCallbackInterfaces.Add(instance);
            @PlaceTurret.started += instance.OnPlaceTurret;
            @PlaceTurret.performed += instance.OnPlaceTurret;
            @PlaceTurret.canceled += instance.OnPlaceTurret;
            @CancelTurret.started += instance.OnCancelTurret;
            @CancelTurret.performed += instance.OnCancelTurret;
            @CancelTurret.canceled += instance.OnCancelTurret;
        }

        private void UnregisterCallbacks(IBuildModeActions instance)
        {
            @PlaceTurret.started -= instance.OnPlaceTurret;
            @PlaceTurret.performed -= instance.OnPlaceTurret;
            @PlaceTurret.canceled -= instance.OnPlaceTurret;
            @CancelTurret.started -= instance.OnCancelTurret;
            @CancelTurret.performed -= instance.OnCancelTurret;
            @CancelTurret.canceled -= instance.OnCancelTurret;
        }

        public void RemoveCallbacks(IBuildModeActions instance)
        {
            if (m_Wrapper.m_BuildModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBuildModeActions instance)
        {
            foreach (var item in m_Wrapper.m_BuildModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BuildModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BuildModeActions @BuildMode => new BuildModeActions(this);
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("MouseKeyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnBuyTurret(InputAction.CallbackContext context);
    }
    public interface IBuildModeActions
    {
        void OnPlaceTurret(InputAction.CallbackContext context);
        void OnCancelTurret(InputAction.CallbackContext context);
    }
}
